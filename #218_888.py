# 8 11 0 3 5 6
lst: list = list(map(int, input().split()))

a = lst.pop(-1)
lst.append(a % 2 == 0)
print(*lst)

'''@Артур_Патрашков, Основная фишка в том, что я использовал новый оператор, 
добавленный в python 3.8 - walrus operator (моржовый оператор) :=. 
Он позволяет создать переменную прямо в функции, 
а затем использовать эту переменную. Советую про него прочитать здесь. 
Затем этой переменной я передал введенный пользователем список, 
состоящий из целых (int) чисел list(map(int,input().split())), 
и вывел его без последнего элемента путем среза [:-1], 
попутно распаковав его с помощью оператора распаковки *. 
Далее удаляю последний элемент списка с помощью метода списка .pop(-1), 
(можно было и не удалять его, а просто обратиться, как к последнему элементу итерируемого объекта [-1], 
но в условии было сказано именно удалить, поэтому так и сделал) а т.к. метод списка list.pop() сохраняет 
удаленный элемент, то мы сразу можем
 обратиться к удаленному элементу и проверить его на нечетность %2!=0, 
 и вернется булевое (bool) значение True или False.'''
# print(*(a:=list(map(int,input().split())))[:-1], a.pop(-1)%2!=0)
# print(*i[:-1], int(i[-1])%2!=0) for i in [input().split()]